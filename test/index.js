import { PassThrough } from 'stream';
import { multiplexStreams, headParser, multiplexedStreamParser, demultiplexBuffer } from '../src/';
import assert from 'assert';

const binaryFibBuffer = 'AAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZ';
const binaryFibBufferLarger = 'AAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZ';

const mediumMsgMultiplexed = 'ASYAAAACz4WrUwEIAAAAeyJpZCI6MX0CCAAAAHsiaWQiOjJ9WcgCNACEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAjQAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQEIAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kCKwCEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAjUAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQEQAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kCJACEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAjYAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQEXAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kCHwCEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAjUAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQEeAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAACFqgIYAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kCNACEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZASUAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQFvAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kBcgCEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAXAAhAABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQFxAIQAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kBcgCEAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAAEBAwUIDRUiN1kAAQEDBQgNFSI3WQABAQMFCA0VIjdZAEwAOcg=';
const largeMsgMultiplexed = '';

function makeStream (data, len, delay) {
  const s = new PassThrough();
  const interval = setInterval(() => s.write(data), delay);
  setTimeout(() => {
    clearInterval(interval);
    s.end();
  }, len+1);
  return s;
}

function within (end, start, fuzz) {
  assert(end - start < fuzz);
}

describe('multiplexStreams', () => {
  it('should compose two lightweight streams', (done) => {
    const s1 = makeStream(new Buffer([1]), 1200, 110);
    const s2 = makeStream(new Buffer([2]), 549, 50);

    let composedBuf = new Buffer(0);
    const s3 = multiplexStreams([s1, s2]);
    s3.on('data', data => {
      composedBuf = Buffer.concat([composedBuf, data]);
    });
    return setTimeout(() => {
      const header = headParser.parse(composedBuf);
      const headerLen = header.headerLen;
      assert.equal(headerLen, 38);
      const chunksBuffer = composedBuf.slice(headerLen);
      const parsedChunks = multiplexedStreamParser.parse(chunksBuffer);
      const streamChunks = parsedChunks.streamChunks;
      assert.equal(streamChunks.length, 21); // 20 messages + 1 CRC

      assert.equal(streamChunks[0].streamId, 2);
      assert.equal(streamChunks[1].streamId, 2);
      assert.equal(streamChunks[2].streamId, 1);

      assert.equal(streamChunks[3].streamId, 2);
      assert.equal(streamChunks[4].streamId, 2);
      assert.equal(streamChunks[5].streamId, 1);

      assert.equal(streamChunks[6].streamId, 2);
      assert.equal(streamChunks[7].streamId, 2);
      assert.equal(streamChunks[8].streamId, 1);

      assert.equal(streamChunks[9].streamId, 2);
      assert.equal(streamChunks[10].streamId, 2);
      assert.equal(streamChunks[11].streamId, 1);

      assert.equal(streamChunks[12].streamId, 2);
      assert.equal(streamChunks[13].streamId, 2);
      assert.equal(streamChunks[14].streamId, 1);

      assert.equal(streamChunks[15].streamId, 1);
      assert.equal(streamChunks[16].streamId, 1);
      assert.equal(streamChunks[17].streamId, 1);
      assert.equal(streamChunks[18].streamId, 1);
      assert.equal(streamChunks[19].streamId, 1);

      assert.equal(composedBuf.length, 143);
      assert.equal(composedBuf.toString('base64').length, 192);

      done();
    }, 1500);
  });

  it('should compose two heavier streams', (done) => {
    const s1 = makeStream(new Buffer(binaryFibBuffer, 'base64'), 1200, 110);
    const s2 = makeStream(new Buffer(binaryFibBuffer, 'base64'), 549, 50);

    let composedBuf = new Buffer(0);
    const s3 = multiplexStreams([s1, s2]);
    s3.on('data', data => {
      composedBuf = Buffer.concat([composedBuf, data]);
    });
    return setTimeout(() => {
      const header = headParser.parse(composedBuf);
      const headerLen = header.headerLen;
      assert.equal(headerLen, 38);
      const chunksBuffer = composedBuf.slice(headerLen);
      const parsedChunks = multiplexedStreamParser.parse(chunksBuffer);
      const streamChunks = parsedChunks.streamChunks;
      assert.equal(streamChunks.length, 22); // 20 messages + 2 CRCs

      assert.equal(streamChunks[0].streamId, 2);
      assert.equal(streamChunks[1].streamId, 2);
      assert.equal(streamChunks[2].streamId, 1);

      assert.equal(streamChunks[3].streamId, 2);
      assert.equal(streamChunks[4].streamId, 2);
      assert.equal(streamChunks[5].streamId, 1);

      assert.equal(streamChunks[6].streamId, 2);
      assert.equal(streamChunks[7].streamId, 2);
      assert.equal(streamChunks[8].streamId, 1);

      assert.equal(streamChunks[9].streamId, 2);
      assert.equal(streamChunks[10].streamId, 2);
      assert.equal(streamChunks[11].streamId, 1);

      assert.equal(streamChunks[12].streamId, 0);

      assert.equal(streamChunks[13].streamId, 2);
      assert.equal(streamChunks[14].streamId, 2);
      assert.equal(streamChunks[15].streamId, 1);

      assert.equal(streamChunks[16].streamId, 1);
      assert.equal(streamChunks[17].streamId, 1);
      assert.equal(streamChunks[18].streamId, 1);
      assert.equal(streamChunks[19].streamId, 1);
      assert.equal(streamChunks[20].streamId, 1);

      assert.equal(composedBuf.length, 2768);
      assert.equal(composedBuf.toString('base64').length, 3692);

      done();
    }, 1500);
  });

  it('should compose two heavier streams, with messages >255 bytes', (done) => {
    // each of these messages is 528 bytes, so we'll need 3 chunks per message
    const s1 = makeStream(new Buffer(binaryFibBufferLarger, 'base64'), 1200, 110);
    const s2 = makeStream(new Buffer(binaryFibBufferLarger, 'base64'), 549, 50);

    let composedBuf = new Buffer(0);
    const s3 = multiplexStreams([s1, s2]);
    s3.on('data', data => {
      composedBuf = Buffer.concat([composedBuf, data]);
    });
    return setTimeout(() => {
      const header = headParser.parse(composedBuf);
      const headerLen = header.headerLen;
      assert.equal(headerLen, 38);
      const chunksBuffer = composedBuf.slice(headerLen);
      const parsedChunks = multiplexedStreamParser.parse(chunksBuffer);
      const streamChunks = parsedChunks.streamChunks;
      assert.equal(streamChunks.length, 67); // 20 original messages split into 3 messages each = 60 + 7 CRCs

      assert.equal(streamChunks[0].streamId, 2);
      assert.equal(streamChunks[1].streamId, 2);
      assert.equal(streamChunks[2].streamId, 2);

      // ensure that the composed message is equal to the buffer originally sent
      const d = streamChunks.slice(0, 3).map(c => c.data.data).reduce((s, d) => s.concat(d), []);
      const reconstructedBuffer = new Buffer(d);
      assert.equal(reconstructedBuffer.length, 528);
      assert.equal(reconstructedBuffer.toString('base64'), binaryFibBufferLarger);

      assert.equal(streamChunks[3].streamId, 2);
      assert.equal(streamChunks[4].streamId, 2);
      assert.equal(streamChunks[5].streamId, 2);

      assert.equal(streamChunks[6].streamId, 1);
      assert.equal(streamChunks[7].streamId, 1);
      assert.equal(streamChunks[8].streamId, 1);

      assert.equal(streamChunks[9].streamId, 0);

      // etc...

      // overhead: 528 bytes per (original) message
      // 20 messages sent = 10560 bytes in raw messages
      // so just a little over ~300 bytes of space overhead after multiplexing!
      assert.equal(composedBuf.length, 10873);
      assert.equal(composedBuf.toString('base64').length, 14500);

      done();
    }, 1500);
  });

  it('streams should be cancelable', (done) => {
    const s1 = makeStream(new Buffer([1]), 1500, 110);
    const s2 = makeStream(new Buffer([2]), 500, 50);

    let composedBuf = new Buffer(0);
    const s3 = multiplexStreams([s1, s2]);
    s3.on('data', data => {
      composedBuf = Buffer.concat([composedBuf, data]);
    });
    setTimeout(() => {
      s3.end();
    }, 750);
    return setTimeout(() => {
      const header = headParser.parse(composedBuf);
      const headerLen = header.headerLen;
      assert.equal(headerLen, 38);
      const chunksBuffer = composedBuf.slice(headerLen);
      const parsedChunks = multiplexedStreamParser.parse(chunksBuffer);
      const streamChunks = parsedChunks.streamChunks;

      // 14 messages + 1 CRC
      // a full non-canceled run would have 20 messages
      assert.equal(streamChunks.length, 15);

      done();
    }, 1500);
  });
});

describe('demultiplexStream', () => {
  it('should take existing small stream buffer, split into 2 streams', (done) => {
    const dataStr = 'ASYAAAACP4SrUwEIAAAAeyJpZCI6MX0CCAAAAHsiaWQiOjJ9CDICNQABAgI1AAECAQQAAQECLwABAgI0AAECAQwAAQECKwABAgI0AAECAREAAQECJAABAgIzAAECARkAAQECGAABAgI4AAECAR4AAQEBcgABAQFwAAEBAXIAAQEBbwABAQFyAAEBAFMAIIE=';
    const data = new Buffer(dataStr, 'base64');
    const streamIdsInOrder = [];
    demultiplexBuffer(data, false, (err, streams) => {
      assert.equal(streams.length, 2);
      streams.forEach((s, id) => {
        s.on('data', d => {
          streamIdsInOrder.push(id);

          if (id === 0) {
            assert.equal(d.toString('base64'), 'AQ==');
          } else if (id === 1) {
            assert.equal(d.toString('base64'), 'Ag==');
          }
        });
      });

      setTimeout(() => {
        assert.deepEqual(streamIdsInOrder, [ 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ]);
        done();
      }, 100);
    });
  });

  it('should take existing small stream buffer, split into 2 streams, respecting real offsets', (done) => {
    const dataStr = 'ASYAAAACP4SrUwEIAAAAeyJpZCI6MX0CCAAAAHsiaWQiOjJ9CDICNQABAgI1AAECAQQAAQECLwABAgI0AAECAQwAAQECKwABAgI0AAECAREAAQECJAABAgIzAAECARkAAQECGAABAgI4AAECAR4AAQEBcgABAQFwAAEBAXIAAQEBbwABAQFyAAEBAFMAIIE=';
    const data = new Buffer(dataStr, 'base64');
    const streamIdsInOrder = [];
    demultiplexBuffer(data, true, (err, streams) => {
      assert.equal(streams.length, 2);
      streams.forEach((s, id) => {
        s.on('data', d => {
          streamIdsInOrder.push(id);

          if (id === 0) {
            assert.equal(d.toString('base64'), 'AQ==');
          } else if (id === 1) {
            assert.equal(d.toString('base64'), 'Ag==');
          }
        });
      });

      // make sure that delays are actually happening
      setTimeout(() => {
        assert(streamIdsInOrder.length < 10);
      }, 250);
      setTimeout(() => {
        assert(streamIdsInOrder.length < 15);
      }, 500);

      setTimeout(() => {
        assert.deepEqual(streamIdsInOrder, [ 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ]);
        done();
      }, 1700);
    });
  });

  it('should take medium-byte-message-size multiplexed stream, ensure no CRC errors', () => {
    const data = new Buffer(mediumMsgMultiplexed, 'base64');
    const streamIdsInOrder = [];
    demultiplexBuffer(data, false, (err, streams) => {
      assert.equal(streams.length, 2);
      streams.forEach((s, id) => {
        s.on('data', d => {
          streamIdsInOrder.push(id);
        });
      });

      setTimeout(() => {
        assert.deepEqual(streamIdsInOrder, [ 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ]);
        done();
      }, 100);
    });
  });

  it('should take large-byte-message-size multiplexed stream, ensure no CRC errors', () => {
    const data = new Buffer(largeMsgMultiplexed, 'base64');
    const streamIdsInOrder = [];
    demultiplexBuffer(data, false, (err, streams) => {
      assert.equal(streams.length, 2);
      streams.forEach((s, id) => {
        s.on('data', d => {
          streamIdsInOrder.push(id);
        });
      });

      setTimeout(() => {
        assert.deepEqual(streamIdsInOrder, [ 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ]);
        done();
      }, 100);
    });
  });
});

// TODO: test that maximum time gap CRCing works
